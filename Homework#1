# Name: Mei Qi Deanna Liu 

.data

.include "Header2.asm" #change this line to test with other inputs

.align 2
	numargs: .word 0
	AddressOfIPDest3: .word 0
	AddressOfIPDest2: .word 0
	AddressOfIPDest1: .word 0
	AddressOfIPDest0: .word 0
	AddressOfBytesSent: .word 0
	AddressOfPayload: .word 0
	
	Err_string: .asciiz "ERROR\n"
	
	newline: .asciiz "\n"
	
	version4: "IPv4\n"
	
	noVersion: "Unsupported:IPv"
	
	comma: ","
	
	period: "."
	
.macro load_args
	sw $a0, numargs
	lw $t0, 0($a1)
	sw $t0, AddressOfIPDest3
	lw $t0, 4($a1)
	sw $t0, AddressOfIPDest2
	lw $t0, 8($a1)
	sw $t0, AddressOfIPDest1
	lw $t0, 12($a1)
	sw $t0, AddressOfIPDest0
	lw $t0, 16($a1)
	sw $t0, AddressOfBytesSent
	lw $t0, 20($a1)
	sw $t0, AddressOfPayload
.end_macro

.text
.globl main
	main: load_args()
	bne $a0, 6, error #check a0 =/= 6 
#atoi of ipdest3
	la $a0, AddressOfIPDest3
	lw $a0, AddressOfIPDest3
	li $v0 84
	syscall
	move $s1, $v0
	beq $v1, -1, error
	blt $v0, 0, error
	bgt $v0, 255, error
#atoi of ipdest2
	la $a0, AddressOfIPDest2
	lw $a0, AddressOfIPDest2
	li $v0 84
	syscall
	move $s2, $v0
	beq $v1, -1, error
	blt $v0, 0, error
	bgt $v0, 255, error
#atoi of ipdest1
	la $a0, AddressOfIPDest1
	lw $a0, AddressOfIPDest1
	li $v0 84
	syscall
	move $s3, $v0
	beq $v1, -1, error
	blt $v0, 0, error
	bgt $v0, 255, error
#atoi of ipdest0
	la $a0, AddressOfIPDest0
	lw $a0, AddressOfIPDest0
	li $v0 84
	syscall
	move $s4, $v0
	beq $v1, -1, error
	blt $v0, 0, error
	bgt $v0, 255, error
#atoi of bytessent
	la $a0, AddressOfBytesSent
	lw $a0, AddressOfBytesSent
	li $v0 84
	syscall
	move $s5, $v0
	blt $v0, -1, error
	bgt $v0, 8191, error
	bne $v0, -1, division
afterDiv:	
#2.1	
	la $a1, Header
	lbu $t0, 3($a1) #t0 hold the third byte
	#move $t5, $t0 #hold the byte
	srl $t1, $t0, 4
	beq $t1, 4, printIP
	bne $t1, 4, printUnsupported
afterCheck:
#2.2 
	lbu $t2, 2($a1) #t2 to hold Type_of_Service
	move $a0, $t2
	li $v0, 1 #Printing Type_Of_Service
	syscall
	li $v0, 4
	la $a0, comma
	syscall
	lhu $t2, 6($a1)
	move $a0, $t2
	li $v0, 1 #Printing Identifier
	syscall
	li $v0, 4
	la $a0, comma
	syscall
	lbu $t2, 11($a1) #t2 to hold Time_To_Live
	move $a0, $t2
	li $v0, 1
	syscall
	li $v0, 4
	la $a0, comma
	syscall
	lbu $t2, 10($a1) #t2 to hold Protocol
	move $a0, $t2
	li $v0, 1
	syscall
	li $v0, 4
	la $a0, newline
	syscall
#2.3 
	lbu $t2, 15($a1) #t2 to hold IPSrc3
	move $a0, $t2
	li $v0, 1 #Printing IPSrc3
	syscall
	li $v0, 4
	la $a0, period
	syscall
	lbu $t2, 14($a1) #t2 to hold IPSrc2
	move $a0, $t2
	li $v0, 1 #Printing IPSrc2
	syscall
	li $v0, 4
	la $a0, period
	syscall
	lbu $t2, 13($a1) #t2 to hold IPSrc1
	move $a0, $t2
	li $v0, 1 #Printing IPSrc1
	syscall
	li $v0, 4
	la $a0, period
	syscall
	lbu $t2, 12($a1) #t2 to hold IPSrc0
	move $a0, $t2
	li $v0, 1 #Printing IPSrc0
	syscall
	li $v0, 4
	la $a0, newline
	syscall
#2.4
	sb $s1, 19($a1) #a1 = header
	sb $s2, 18($a1)
	sb $s3, 17($a1)
	sb $s4, 16($a1)
	lw $t3, 16($a1)
	move $a0, $t3
	li $v0, 34
	syscall
	li $v0, 4
	la $a0, newline
	syscall
#2.5
	la $a0, AddressOfPayload
	lw $a0, AddressOfPayload
	move $s6, $a0
while: 
	lbu $s0, ($a0)
	addi $a0, $a0, 1
	beq $s0, 0, done
	addi $a2, $a2, 1
	j while
done:	
	lbu $t5, 3($a1) #t5 hold the third byte
	sll $t5, $t5, 28
	srl $t5, $t5, 28 #get header_length
	li $t6, 4
	mult $t5, $t6
	mflo $t0
	add $t7, $t0, $a2
	sh $t7, 0($a1) #store back into the header 
	
#NEEDS TO BE FIXED 2.5.5 & 2.1.5
	#prints header btye 3
	#lw $t1, 0($a1)
	#li $v0, 34
	#move $a0, $t1
	#syscall
	#li $v0, 4
	#la $a0, newline
	#syscall
#2.6
	lhu $t1, 4($a1)
	srl $t2, $t1, 13 #t2 is the shifted one ; t1 is the original one t2 = 111
	move $a0, $t2 #a0 is the flags
	li $v0, 35
	syscall
	li $v0, 4
	la $a0, comma
	syscall
	sll $t3, $t1, 19 #t3 = 101010010
	srl $t3, $t3, 19
	move $a0, $t3
	li $v0, 35
	syscall
	li $v0, 4
	la $a0, newline
	syscall
#call flag functions
	beq $s5, 0, flag0
	beq $s5, -1, flagNeg1
	bgt $s5, 0, flagGreater0
	
after2.61:
	move $a0, $t2 #a0 is the flags
	#li $v0, 35
	#syscall
	j after2.6
after2.62:
	#li $t3, 2
	ori $t4, $t2, 0x2
	sll $t4, $t4, 29
	srl $t4, $t4, 16
	move $a0, $t4 #a0 is the flags
	#li $v0, 35
	#syscall
	sh $t4, 4($a1)
	j after2.6
after2.63:
	li $t2, 0
	ori $t2, $t2, 0x4 
	sll $t2, $t2, 29
	srl $t2, $t2, 16
	or $t2, $t2, $s5
	move $a0, $t2
	#li $v0, 35
	#syscall
	sh $t2, 4($a1)
	#li $v0, 4
	#la $a0, newline
	#syscall
	j after2.6

after2.6:
#2.7
	#a1 = header
	#t5 = headerlength
	#s6 = payload
	li $t1, 4
	multu $t1, $t5
	mflo $t2
	move $a0, $a1
	#li $v0, 1
	#syscall
	add $a1, $a1, $t2 #startingpoint = $a1
	move $t0, $s6
startLoop:
	#move $a0, $t0
	#li $v0, 34
	#syscall
	lbu $t3, 0($t0)
	beq $t3, 0, doneloop
	sb $t3, ($a1)
	addi $t0, $t0, 1
	addi $a1, $a1, 1
	j startLoop
doneloop:
	#la $a1, Header
	#sb $s6, ($t0)
#2.8
	move $a3, $a1
	la $a1, Header
	move $a0, $a1
	li $v0, 34
	syscall
	li $v0, 4
	la $a0, comma
	syscall
	move $a0, $a3
	li $v0, 34
	syscall
	li $v0, 4
	la $a0, newline
	syscall
	#la $a1, Header
#2.9
	#lhu $t0, 8($a1) 
	#li $v0, 34
	#move $a0, $t0
	#syscall
	#move $a0, $t5
	#syscall
	
	#li $v0, 34
	#move $a0, $t1
	#syscall
	
	#t5 = headerlength
	li $t7, 2
	mult $t5, $t7
	mflo $t6 #header * 2
	li $t3, 0 #pointer
	li $t4, 0 
	
looploop:
	lhu $t1, ($a1)
	beq $t4, $t6, endlooploop
	#move $a0, $t1
	#li $v0, 34
	#syscall
	#li $v0, 4
	#la $a0, newline
	#syscall
	add $t3, $t3, $t1
#	move $a0, $t3
#	li $v0, 34
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall
	addi $t4, $t4, 1
	addi $a1, $a1, 2
	j looploop
#	add $t3, $t1, $t2
#	lhu $t1, 4($a1)
#	add $t3, $t3, $t1
#	lhu $t1, 6($a1)
#	add $t3, $t3, $t1
#	lhu $t1, 10($a1)
#	add $t3, $t3, $t1
#	lhu $t1, 12($a1)
#	add $t3, $t3, $t1
#	lhu $t1, 14($a1)
#	add $t3, $t3, $t1
#	lhu $t1, 16($a1)
#	add $t3, $t3, $t1
#	lhu $t1, 18($a1)
#	add $t3, $t3, $t1
#	move $a0, $t3
#	li $v0, 35
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall
endlooploop:
	la $a1, Header
	lhu $t0, 8($a1) #checksum
	sub $t4, $t3, $t0
#	move $a0, $t4 #final 
#	li $v0, 35
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall
	srl $t5, $t4, 16 #t5 = 0100
#	move $a0, $t5
#	li $v0, 35
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall
#	move $a0, $t4
#	li $v0, 35
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall

	sll $t6, $t4, 16 #t5
	srl $t6, $t6, 16
#	move $a0, $t6
#	li $v0, 35
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall

	add $t6, $t5, $t6
#	move $a0, $t6
#	li $v0, 35
#	syscall
#	li $v0, 4
#	la $a0, newline
#	syscall
#	move $a0, $t6
#	li $v0, 34
#	syscall
	xori $t6, $t6, 0x0000ffff
	#li $v0, 4
	#la $a0, newline
	#syscall
	#move $a0, $t5
	#li $v0, 35
	#syscall
	sh $t6, 8($a1)
#2.10
	li $v0, 10 #exits program = 10
	syscall

	error:
		la $a0, Err_string #load address to print string [put into a0]
		li $v0, 4 #load immediate, 4 = print string
		syscall
		li $v0, 10 #exits program = 10
		syscall
		
	division:
		li $t0, 8
		div $v0, $t0
		mfhi $v0 
		bne $v0, 0, error
		j afterDiv
		
	printIP:
		li $v0, 4
		la $a0, version4
		syscall
		j afterCheck
		
	printUnsupported:
		li $v0, 4
		la $a0, noVersion
		syscall
		move $a0, $t1 #Copy t1 into a0 which is the a in header 1
		li $v0, 1 #t0 is the a6 in header1
		syscall 
		li $v0, 4
		la $a0, newline
		syscall
		sll $t2, $t1, 4 #0000000a0
		sub $t3, $t0, $t2 #000000a6-000000a0
		ori $t4, $t3, 0x40 #00000006 or 00000040 = 000000046
		sb $t4, 3($a1)
		#sll $t1, $t1, 4
		#sub $t0, $t0, $t1
		#addi $t0, $t0, 40
		#sb $t0, 3($a1)
		#ori $t2, $t1, 0x4
		#sub $t7, $t, $t0
		j afterCheck
		
	flag0:
		li $t2, 0
		sh $t2, 4($a1)
		j after2.61
		
	flagNeg1:
		li $t2, 0
		sh $t2, 4($a1)
		j after2.62
	
	flagGreater0:
		sh $s5, 4($a1)
		j after2.63	
		
		
	
		
	
		
